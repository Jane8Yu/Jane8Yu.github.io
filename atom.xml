<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ξ</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-23T15:39:08.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>余 ξ</name>
    <email>yzhen01.zy@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Handling concurrency gracefully</title>
    <link href="http://yoursite.com/2017/08/23/Handling-concurrency-gracefully/"/>
    <id>http://yoursite.com/2017/08/23/Handling-concurrency-gracefully/</id>
    <published>2017-08-23T13:47:41.000Z</published>
    <updated>2017-08-23T15:39:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>有一天，你想知道你家的小猫咪kakiki整天出去厮混的朋友有谁？<br>首先，你得知道你家猫咪的唯一标识id，然后再用这个id去数据库查它的朋友。<br>因此，你得发送两个请求，其中第一个请求结果是第二请求的参数。<br>相信，很多人都遇到过类似这样的情景吧！甚至可能需要发送五六个请求。怎么解决呢？<br><a id="more"></a></p>
<hr>
<p>我们先来弄个假的数据库，用setTimeout来假装网络延迟(<em>@ο@</em>) </p>
<h1 id="Make-a-fake-db"><a href="#Make-a-fake-db" class="headerlink" title="Make a fake db"></a>Make a fake db</h1><pre><code>class FakeDatabase{
constructor(){
    this.purr = {
        id: 1,
        name: &apos;kakiki&apos;
    };
    this.purrs = [this.purr, this.purr, this.purr];
}
getPurr(){
    return new Promise((resolve, reject) =&gt; {
        setTimeout(()=&gt;resolve(this.purr), 233);
    })
}
getPurrs(purrId){
    return new Promise((resolve, reject) =&gt; {
        setTimeout(()=&gt;resolve(this.purrs.slice()), 233);
    })
}
throwError(){
    return new Promise((resolve, reject) =&gt; {
        setTimeout(()=&gt;reject(new Error(&apos;Internal error&apos;)), 233);
    })
}
}
const db = new FakeDatabase();
let purr, purrs;
</code></pre><hr>
<p>用回调是怎样写的呢？</p>
<h1 id="In-callback-way"><a href="#In-callback-way" class="headerlink" title="In callback way"></a>In callback way</h1><pre><code>function callbackHell(){
db.getPurr().then((returnedPurr)=&gt;{
    purr = returnedPurr;
    db.getPurrs(purr.id).then((returnedPurrs)=&gt;{
        purrs = returnedPurrs;
        console.log(&quot;callbackHell &quot;, {purr, purrs});
    })
})
}
</code></pre><hr>
<p>写完之后是不是觉得有点恶心，那我们用promise吧<br>（紫霞仙子，你还记得那个一万年期限的承诺吗/(ㄒoㄒ)/~~）</p>
<h1 id="In-promise-chain-way"><a href="#In-promise-chain-way" class="headerlink" title="In promise chain way"></a>In promise chain way</h1><pre><code>function promiseChain(){
db.getPurr()
    .then((returnedPurr)=&gt;{
        purr = returnedPurr;
        return db.getPurrs(purr.id);
    })
    .then((returnedPurrs)=&gt;{
        purrs = returnedPurrs;
        console.log(&quot;promiseChain &quot;, {purr, purrs});
    })
}
</code></pre><hr>
<p>写完之后，觉得还是不够优雅。用async/await可以假装成是串行。（记得用babel来兼容老顽固😯）</p>
<h1 id="In-asyncAwait-way"><a href="#In-asyncAwait-way" class="headerlink" title="In asyncAwait way"></a>In asyncAwait way</h1><pre><code>async function asyncAwait(){
try{
    purr = await db.getPurr();
    purrs = await db.getPurrs(purr.id);
    console.log(&quot;asyncAwait &quot;, {purr, purrs});
    //循环遍历
    const purrsPromises = purrs.map(purr =&gt; db.getPurrs(purr.id));
    const morePurrs = await Promise.all(purrsPromises);
    console.log(&apos;morePurrs &apos;, morePurrs);
}catch(err){
    //异常流
    console.error(err);
}
}
</code></pre><hr>
<p>现在终于知道kakiki的死党是谁了！！<br>而async/await又是怎么从promise、generator逐步演变过来的呢？<br>咱们下回分解。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.patricktriest.com/what-is-async-await-why-should-you-care/" target="_blank" rel="external">what-is-async-await-why-should-you-care</a></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=21256134&auto=0&height=66"></iframe>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有一天，你想知道你家的小猫咪kakiki整天出去厮混的朋友有谁？&lt;br&gt;首先，你得知道你家猫咪的唯一标识id，然后再用这个id去数据库查它的朋友。&lt;br&gt;因此，你得发送两个请求，其中第一个请求结果是第二请求的参数。&lt;br&gt;相信，很多人都遇到过类似这样的情景吧！甚至可能需要发送五六个请求。怎么解决呢？&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>the Year of Rooster</title>
    <link href="http://yoursite.com/2017/01/28/the-Year-of-Rooster/"/>
    <id>http://yoursite.com/2017/01/28/the-Year-of-Rooster/</id>
    <published>2017-01-28T11:42:55.000Z</published>
    <updated>2017-02-04T12:46:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="//music.163.com/outchain/player?type=2&id=22341058&auto=0&height=32"></iframe><br>Happy Year of the rooster !</p>
<p>There is meaningless to blame for the tragic incident that happened in the zoo. But it made me to rethinked the relationship between human and nature.<a id="more"></a><br>I became curious about animal again, such as tiger, lion, coordinate(death spinning is horrible), python, elephant and so on. I still remember the last time I watching the animal world was at high school.<br>These animal fight bravely until they die. The blood sparks fly in all directions. The painful screams pierce the air. The survival is so cruel. To be or not to be, that’s a big question. And it is more intuitive in the wild world<br>I never thought that I would be deeply touched by the south Africa lions in this new year 2017. After watching televised documentary Mapogos, I feel sad. They were borned for being king, they fought and kill whatever blocked their way, they dominated a huge land, they died painfully. They had emotions like human. What a cruel and merciless fate.<br>My poor English fail to express their admirable spirit. So I highly recommend you to google Mapogos.</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://www.seasonsinafrica.com/lodges-in-south-africa/sabi-sand-private-game-reserve/leopard-hills-private-game-reserve/blog/rangers-report-december-2010/" target="_blank" rel="external">Mapogos</a><br><a href="https://book.douban.com/subject/1059355/" target="_blank" rel="external">《野生的爱尔莎》</a><br><a href="https://book.douban.com/subject/10786475/" target="_blank" rel="external">《狮语者》</a><br><a href="https://www.youtube.com/channel/UC3SIm-UNl4Ou381-PYKzU8w" target="_blank" rel="external">big cat enzo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=298 height=52 src=&quot;//music.163.com/outchain/player?type=2&amp;id=22341058&amp;auto=0&amp;height=32&quot;&gt;&lt;/iframe&gt;&lt;br&gt;Happy Year of the rooster !&lt;/p&gt;
&lt;p&gt;There is meaningless to blame for the tragic incident that happened in the zoo. But it made me to rethinked the relationship between human and nature.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>聆听音乐</title>
    <link href="http://yoursite.com/2016/11/22/Enjoy-music/"/>
    <id>http://yoursite.com/2016/11/22/Enjoy-music/</id>
    <published>2016-11-22T13:40:56.000Z</published>
    <updated>2017-02-10T14:52:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>适逢星海音乐学院的音乐季，每周都有几场免费的音乐会，如此天时地利人和，何不补上我久违的音乐课。<br><a id="more"></a><br>每周起码去两趟星海，一次骑着小黄车屁颠屁颠地去拿票；第二次拿着票去看演出，听完后余音缭绕，偶尔沿着内环趁着月色散步回本校。<br>有时室内音乐，有时交响乐；有时西方古典乐，有时中华民乐；见识了许多民乐乐器，如阮琴、扬琴、笙……；<br>相比于西方古典乐，感觉中华民乐更加的含蓄委婉。<br>只恨自己不懂欣赏，听不出何时转了调，何处a小调何处g大调。于是看是看关于音乐的书籍影像，恶补音乐方面的知识。<br>看《聆听音乐》能比较系统了解，看《傅雷家书》能从父子的只言片语中对音乐的某些部分有些较为深刻的认识。<br>傅雷先生能在音乐会中听出演奏者的不足，希望自己以后也能这样听懂和鉴赏音乐的美。<br>以下摘抄几段，以示提点。</p>
<blockquote>
<p>柯子歧送来奥艾斯脱拉与奥勃林的FranctK和Sonata，借给我们听。第一个印象是太火暴，不够Franck味。volume太大，而melody应付得太粗糙。第三章不够神秘味儿；第四章violin转弯处显然出了角，不圆润，连我都听得很清楚。piano也有一个地方，tone的变化与上面不调和。后来又拿出Thibaud一Cortot来一比，更显出这两人的修养与了解。有许多句子结尾很轻（指小提琴部分）很短，但有一种特别的气韵，我认为便是法朗克的“隐忍”与“舍弃”精神的表现。这一点在俄国演奏家中就完全没有。我又回想起你和韦前年弄的时候，大家听过好几遍Thibaud-Cortot的唱片，都觉得没有什么可学的；现在才知道那是我们的程度不够，体会不出那种深湛、含蓄、内在的美。而回忆之下，你的pianopart也弹得大大的过于romantic。T.C.的演奏还有一妙，是两样乐器很平衡。苏联的是violin压倒Piano，不但volume如此，连music也是被小提琴独占了。我从这一回听的感觉来说，似乎奥艾斯脱拉的tone太粗豪，不宜于拉十分细腻的曲子。</p>
<p>自己弹的曲子，不宜尽弹，而常常要停下来想想，想曲子的picture（意境，境界），追问自己究竟要求的是一个怎样的一个境界，这是使你明白你what you want（你所要的）是什么，而且现在脑子里推敲曲子的结构、章法、起伏、高潮、低潮。</p>
<p>亲爱的孩子，刚听了波兰ReginaSmangianka音乐会回来；上半场由上海乐队奏特伏夏克的第五（NewWorld[新世界]），下半场是EgmondOverture和Smangianka弹的贝多芬第一Concerto。Encore四支：一，Beethoven：Ecossaise；二，Scarlatti：JonatainCMaj；三，Chopin：EtudeOp.25，No.12；四，Khachaturian：Toccata。<br>Concerto弹得很好；乐队伴奏居然也很像样，出乎意外，因为照上半场的特伏夏克听来，教人替他们捏一把汗的。Scarlatti光芒灿烂，意大利风格的brio都弹出来了。Chopin的Etude，又有火气，又是干净。这是近年来听到的最好的音乐会。</p>
<p>前二天听了捷克代表团的音乐会：一个男中音，一个钢琴家，一个提琴家。后两人都是头发花白的教授，大提琴的tone[声质]很贫乏，技巧也不高明，感情更谈不到；钢琴家则是极呆极木、弹Liszt[李斯特]①的HungarianRhapsodyNO.12[匈牙利狂想曲第十二号]，各段不连贯，也没有briancy[光彩，出色之处]；弹Smetana[斯麦特纳]②的COncertFantasy[幻想协奏]，也是散散率率，毫无味道，也没有特殊的捷克民族风格。三人之中还是唱的比较好，但音质不够漂亮，有些“空”；唱莫扎特的MarriageofFigaro[《费加洛的婚礼》]没有那种柔婉妩媚的气息。唱Carman[《卡门）]中的《斗牛士歌》，还算不差，但火气不够，野性不够。Encore[加唱一曲]唱莫索斯基的《跳蚤之歌》，倒很幽默，但钢琴伴奏（就是弹独奏的教授）呆得很，没有humorist[幽默，诙谐]味道。呆的人当然无往而不呆。唱的那位是本年度“prague[布拉格]之春”的一等奖，由此可见国际上唱歌真好的也少，这样的人也可得一等奖，人才也就寥落可怜得很了！</p>
<p>以音乐而论，我觉得你的协奏曲非常含蓄，绝无罗宾斯丹那种感伤情调，你的情感都是内在的。第一乐章的技巧不尽完整，结尾部分似乎很显明的有些毛病。第二乐章细腻之极，touch[触键]是delicate[精致]之极。最后一章非常brilliant[辉煌，出色]。摇篮曲比给奖音乐会上的好得多，mood[情绪]也不同，更安静。幻想曲全部改变了：开头的引子，好极，沉着，庄严，贝多芬气息很重。中间那段slow[缓慢]的singing part[如歌片段]，以前你弹得很tragic[悲沧]的，很sad[伤感]的，现在是一种惆怅的情调。整个曲子像一座巍峨的建筑，给人以厚重、扎实、条理分明、波涛汹涌而意志很热的感觉。</p>
<p>李先生说你的协奏曲，左手把rhythm[节奏]控制得稳极，rubato[音的长短顿挫]很多，但不是书上的，也不是人家教的，全是你心中流出来的。她说从国外回来的人常说现在弹萧邦都没有rubato[音的长短顿挫]了，她觉得是不可能的；听了你的演奏，才证实她的怀疑并不错。问 题不是没有rubato[音的长短顿挫]，而是怎样的一种rubato[音的长短顿挫]。</p>
<p>　　玛祖卡，我听了四遍以后才开始捉摸到一些，但还不是每支都能体会。我至此为止是能欣赏了OP. 59，No.1[作品59 之一]；OP.68，No.4[作品68 之四]；OP.41，No.2[作品41 之二]；OP.33，No.1[作品33 之一]。OP.68，No.4。[作品68 之四]的开头像是几句极凄怨的哀叹。OP.41，No.2[作品41 之二]中间一段，几次感情欲上不上，几次悲痛冒上来又压下去，到最后才大恸之下，痛哭出声。第一支最长的OP.56，No.3[作品56 之三]，因为前后变化多，还来不及抓握。阿敏却极喜欢，恩德也是的。她说这种曲子如何能学，我认为不懂什么叫做“tone colour”[音色]的人，一辈子也休想懂得一丝半毫，无怪几个小朋友听了无动于衷，colour sense[音色领悟力]也是天生的。孩子，你真怪，不知你哪儿来的这点悟性！斯拉夫民族的灵魂，居然你天生是具备的。斯克里亚宾的prelude[前奏曲]既弹得好，玛祖卡当然不会不好。恩德说，这是因为中国民族性的博大，无所不包，所以什么别的民族的东西都能体会得深刻。Notre–Temps No.2[我们的时代第二号]好似太拖拖拉拉，节奏感不够。我门又找出罗宾斯丹的片子来听了，觉得他大部分都是节奏强，你大部分是诗意侬；他的音色变化不及你的多。</p>
<p>贝多芬有对大自然的感情，否则也不成其为真正的浪漫派了。但他的爱田野特别是为了能够孤独，也为了在田野中他觉得有一种生理方面的快感；他觉得自由自在， 呼吸通畅。他对万物之爱是有一些空泛的（ a little vague），他并不能辨别每个地方的特殊的美。舒伯特的感受却更细致。海洋，河流，山丘，在他作品中有不同的表现，不但如此，还表现出是平静的海还是汹 涌的海，是波涛澎湃的大江还是喁喁细语的个溪，是雄伟的高山还是妩媚的岗峦。在他歌曲的旋律之下，有生动如画的伴奏作为一个框子或者散布一股微妙的气氛。<br>                                        ——《论舒伯特 —舒伯特与贝多芬的比较研究》 [法]保尔·朗陶尔米著，傅雷译</p>
<p>你的艺术需要时时刻刻的创造，便是领会原作的精神也得从多方面（音乐以外的感受）去探讨：正因为过去的大师就是从大自然，从人生各方面的材料中“泡”出来的，把一切现实升华为emotion[感情]与sentiment[情操]，所以表达他们的作品也得走同样的路。</p>
<p>你也很明白，钢琴上要求放松先要精神上放松：过度的室内生活与书斋生活恰恰是造成现代知识分子神经紧张与病态的主要原因；而萧然意远，旷达恬静，不滞于物，不凝于心的境界只有从自然界中获得，你总不能否认吧？</p>
<p>怎么能在“不由自主”（carried by himself）的时候超过自己而不是越出规矩，变成“野”、“海”、“狂”, 是个大问题。怎么能保持生机而达到完满，又是个大问题。作者在此都着重在spontaneity and naturalness[真情流露与自然而然]方面，我觉得与个人一般的修养有关，与能否保持童心和清新的感受力有关。</p>
<p>你哥哥在另一信中还提到：“在这个decadent[颓废的]世界，在国外这些年来，我遇见了不少人物whom I admire and love，from whom I learn [一些我仰慕喜爱、值得学习的人物]，可是从来没有遇到任何人能带我到那个at the same time passionate and serene，profound and simple，affectionate and proud, subtle and straight forward[（同时）又热烈又恬静，又深刻又朴素，又温柔又高做，又微妙又率直]的世界。”可见他的确了解我的“两面性”，也了解到中国旧文化的两面性。又热烈又恬静，又深刻又朴素，又温柔又高傲，又微妙又率直：这是我们固有文化中的精化，值得我们自豪的！</p>
</blockquote>
<p>听了这么多场音乐会，也会有一些碎片化的感想，有点不成体统。</p>
<ul>
<li>留白的地方也会组成乐曲，就像留白的画，<strong>空</strong>才是主角。</li>
<li>音乐能表达出许多用言语表达不出来的情感。</li>
<li>在音乐中，你能品尝出不同味道的悲伤。</li>
<li>优秀的音乐家能巧妙地运用乐器来适当地表达自己的情感，仿佛乐器是他们身体的一部分，与乐器合二为一。他们知道高音在哪里，低音在哪里，用多大的力气能凑出理想的强弱，怎么样的节奏能充分挑逗观众的情绪，表达出一定的戏剧性。<br>音乐真是神奇啊，我的音乐学习之路会继续走下去的。</li>
</ul>
<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=5276807&auto=0&height=66"></iframe></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://v.163.com/special/listeningtomusic/" target="_blank" rel="external">【课】聆听音乐</a><br><a href="https://book.douban.com/subject/10590165/" target="_blank" rel="external">【书】聆听音乐</a><br><a href="https://book.douban.com/subject/1916526/" target="_blank" rel="external">【书】傅雷家書</a><br><a href="https://book.douban.com/subject/4116055/" target="_blank" rel="external">【书】Heritage of Music</a><br><a href="https://book.douban.com/subject/26773393/" target="_blank" rel="external">【书】噪音</a><br><a href="https://movie.douban.com/subject/1303034/" target="_blank" rel="external">【影】Farinelli </a><br><a href="https://book.douban.com/subject/1428307/" target="_blank" rel="external">【书】西方文明中的音乐</a><br><a href="https://book.douban.com/subject/26795322/" target="_blank" rel="external">【书】默观无限美</a><br><a href="https://book.douban.com/subject/26795322/" target="_blank" rel="external">【书】默观无限美</a><br><a href="https://book.douban.com/subject/1291204/" target="_blank" rel="external">【书】哥德尔、艾舍尔、巴赫</a><br><a href="http://www.chenalexander.com/Piano-Phase" target="_blank" rel="external">大牛的音乐可视化</a><br>雪枫音乐会</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;适逢星海音乐学院的音乐季，每周都有几场免费的音乐会，如此天时地利人和，何不补上我久违的音乐课。&lt;br&gt;
    
    </summary>
    
      <category term="乐" scheme="http://yoursite.com/categories/%E4%B9%90/"/>
    
    
      <category term="音乐会" scheme="http://yoursite.com/tags/%E9%9F%B3%E4%B9%90%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>A demo on tableau</title>
    <link href="http://yoursite.com/2016/11/02/A-demo-on-tableau/"/>
    <id>http://yoursite.com/2016/11/02/A-demo-on-tableau/</id>
    <published>2016-11-02T09:00:45.000Z</published>
    <updated>2017-02-16T09:42:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>图1是用google的data studio做的GA分析图表；<br>图2是用tableau desktop做的记账分析图表；<br>图3则是<a href="https://public.tableau.com/profile/yzhen#!/vizhome/RegionalSalesandProfits_/1" target="_blank" rel="external">Regional Sales and Profits</a>。<br>试过这几个可视化工具后，感觉最百搭的还是excel；google的data studio易上手；而tableau则比较酷炫，但放在public上交互响应有点慢；还是js更自由，只是自由的内核是独立。<br><a id="more"></a></p>
<p>学好“道”，才能更好地运用“术”！</p>
<p>我所希望做成的数据可视化是像哈利波特里面那种，比如活点地图，充满魔法magic，再加点中国特色的山水画。</p>
<p>后记：<br>想到其中一个idea，就是可以用谷歌表单用来记账，然后用google sheet处理记账的表单数据，做成一个新的日历图表，显示每天的现金流，预测每月的现金流。<br>图4、图5就是做到自定义月份的日历这一步了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图1是用google的data studio做的GA分析图表；&lt;br&gt;图2是用tableau desktop做的记账分析图表；&lt;br&gt;图3则是&lt;a href=&quot;https://public.tableau.com/profile/yzhen#!/vizhome/RegionalSalesandProfits_/1&quot;&gt;Regional Sales and Profits&lt;/a&gt;。&lt;br&gt;试过这几个可视化工具后，感觉最百搭的还是excel；google的data studio易上手；而tableau则比较酷炫，但放在public上交互响应有点慢；还是js更自由，只是自由的内核是独立。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Happy Birthday</title>
    <link href="http://yoursite.com/2016/04/21/Happy-Birthday/"/>
    <id>http://yoursite.com/2016/04/21/Happy-Birthday/</id>
    <published>2016-04-21T15:16:55.000Z</published>
    <updated>2017-01-31T12:51:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>富临食府       惠福东路       老广唐楼 <br><br>创意粤菜       脆皮猪手       白灼牛肉<br><br>芝士意面       沙拉猪扒       甜红豆沙<br><br><a id="more"></a><br>小西家作       榴莲小卷       四月二十 <br><br>而今甘四       感恩所有       向死而生</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=29544641&auto=0&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;富临食府       惠福东路       老广唐楼 &lt;br&gt;&lt;br&gt;创意粤菜       脆皮猪手       白灼牛肉&lt;br&gt;&lt;br&gt;芝士意面       沙拉猪扒       甜红豆沙&lt;br&gt;&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>前端开发的脑图</title>
    <link href="http://yoursite.com/2015/11/29/MindMapOfWebDevelop/"/>
    <id>http://yoursite.com/2015/11/29/MindMapOfWebDevelop/</id>
    <published>2015-11-29T01:44:40.000Z</published>
    <updated>2016-11-12T02:30:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>根据我这一年多的经验总结，从公司产品上线的角度出发，整理归纳了前端开发的脑图：<br>从产品需求确定，到设计、交互，到前端、后台的开发、对接，到测试，到运维，最后到到数据可视化分析，其中罗列了每个环节主要技术点，也是日后我要多加努力的方向！<br><a id="more"></a><br><img src="http://7vijpr.com1.z0.glb.clouddn.com/MindMapOfWebDevelopment.png" alt="MindMapOfWebDevelopment"></p>
<p>图片不太方便查看，顺便提供<a href="http://naotu.baidu.com/file/f1f0d2dfc4549c0ca01ecbd6946964a9?token=e577f13401323fce" target="_blank" rel="external">脑图格式</a>，提取密码: abeO 。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;p&gt;根据我这一年多的经验总结，从公司产品上线的角度出发，整理归纳了前端开发的脑图：&lt;br&gt;从产品需求确定，到设计、交互，到前端、后台的开发、对接，到测试，到运维，最后到到数据可视化分析，其中罗列了每个环节主要技术点，也是日后我要多加努力的方向！&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端 脑图" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF-%E8%84%91%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>一维搜索之黄金分割法的matlab实现</title>
    <link href="http://yoursite.com/2015/11/27/%E4%B8%80%E7%BB%B4%E6%90%9C%E7%B4%A2%E4%B9%8B%E9%BB%84%E9%87%91%E5%88%86%E5%89%B2%E6%B3%95%E7%9A%84matlab%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2015/11/27/一维搜索之黄金分割法的matlab实现/</id>
    <published>2015-11-27T11:20:48.000Z</published>
    <updated>2016-11-12T02:30:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>一维搜索方法<ul>
<li>区间收缩<ul>
<li>黄金分割法</li>
</ul>
</li>
<li>函数逼近<ul>
<li>三点二插法</li>
<li>牛顿法</li>
</ul>
</li>
<li>初始搜索区间<ul>
<li>外推内插法</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><small>在此只是记录我的笔记，方便日后重温。</small></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>设有一个单谷函数，某个区间[a,b]存在极小值点，用黄金分割法怎么找到它呢？<br><a id="more"></a></p>
<h3 id="实现思想关键："><a href="#实现思想关键：" class="headerlink" title="实现思想关键："></a>实现思想关键：</h3><ul>
<li>x1,x2∈[a,b], x1&lt;x2</li>
<li>x1 - a = b - x2</li>
<li>保持缩减比不变：lamba=（保留的区间长度/原区间长度) 不变</li>
</ul>
<p>为啥是这个比例，课本也没说，可能经验值得出比较迅速有效缩减区间吧，具体还得查阅相关文献。</p>
<h3 id="matlab实现源码"><a href="#matlab实现源码" class="headerlink" title="matlab实现源码"></a>matlab实现源码</h3><pre><code>% init

x = -1:0.01:1; % range of x values
f = @(x)2*x.^2-x-1; % f(x) = 2*x^2-x-1 , anonymous piecewise matlab function form 
a = -1; % start of interval
b = 1; % end of interval
len = b - a; % length of interval  
lambda = double((sqrt(5)-1)/2); %golden proportion coefficient, around 0.618
epsilon = 0.06; % accuracy value
iter = 50; % maximum number of iterations
k = 0; %number of iterations

figure; hold on;
plot(x, f(x)); 


% computing x values
x1 = a + (1-lambda)*len;
x2 = a + lambda*len;

% computing values in x points
f_x1 = f(x1);
f_x2 = f(x2);

while((abs(b - a) &gt; epsilon) &amp;&amp; (k &lt; iter))
  k = k + 1
  if(f_x1 &lt; f_x2)
    b = x2;
    x2 = x1;
    len = b - a;
    x1 = a + (1 - lambda)*len;

    f_x1 = f(x1);
    f_x2 = f(x2);

    sprintf(&apos;     x_min = %f&apos;, x1)
    sprintf(&apos;     f(x_min) = %f&apos;, f_x1)

     plot(x1, f_x1, &apos;rx&apos;);
  else
    a = x1;
    x1 = x2;
    len = b - a;
    x2 = a + lambda*len;

    f_x1 = f(x1);
    f_x2 = f(x2);

    sprintf(&apos;    x_min = %f&apos;, x2)
    sprintf(&apos;    f(x_min) = %f&apos;, f_x2)

     plot(x2, f_x2, &apos;rx&apos;);
  end

end

% chooese minimum point 
if(f_x1 &lt; f_x2)
  sprintf(&apos;x_min = %f&apos;, x1)
  sprintf(&apos;f(x_min) = %f&apos;, f_x1)
  plot(x1, f_x1, &apos;bo&apos;)
else 
  sprintf(&apos;x_min = %f&apos;, x2)
  sprintf(&apos;f(x_min) = %f&apos;, f_x2)
  plot(x2, f_x2, &apos;bo&apos;)
end
</code></pre><hr>
<p>奉上 linprog 使用小例子<br>(其实只用在matlab里输入 linprog help 就可以找到该函数的使用方法啦)</p>
<pre><code>% coefficients
f = [-5; -2; 0; 0; 0];
Aeq =  [30 20 1 0 0
      5 1 0 1 0
      1 0 0 0 1];
beq = [160; 15; 4];
lb = zeros(5,1);

% call a linear programming routine
[x, fval, exitflag, output, lambda] = linprog(f, [], [], Aeq, beq, lb);

% Examine the solution and Lagrange multipliers:
x, fval
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一维搜索方法&lt;ul&gt;
&lt;li&gt;区间收缩&lt;ul&gt;
&lt;li&gt;黄金分割法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;函数逼近&lt;ul&gt;
&lt;li&gt;三点二插法&lt;/li&gt;
&lt;li&gt;牛顿法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;初始搜索区间&lt;ul&gt;
&lt;li&gt;外推内插法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;small&gt;在此只是记录我的笔记，方便日后重温。&lt;/small&gt;&lt;/p&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h2&gt;&lt;p&gt;设有一个单谷函数，某个区间[a,b]存在极小值点，用黄金分割法怎么找到它呢？&lt;br&gt;
    
    </summary>
    
      <category term="最优化" scheme="http://yoursite.com/categories/%E6%9C%80%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="matlab 黄金分割 一维搜索" scheme="http://yoursite.com/tags/matlab-%E9%BB%84%E9%87%91%E5%88%86%E5%89%B2-%E4%B8%80%E7%BB%B4%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>论文笔记：Chimera</title>
    <link href="http://yoursite.com/2015/11/15/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0%EF%BC%9AChimera-Collaborative-Preemption-for-Multitasking-on-a-Shared-GPU/"/>
    <id>http://yoursite.com/2015/11/15/论文笔记：Chimera-Collaborative-Preemption-for-Multitasking-on-a-Shared-GPU/</id>
    <published>2015-11-15T12:33:47.000Z</published>
    <updated>2016-11-12T02:30:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://scholar.google.com/citations?view_op=view_citation&amp;hl=en&amp;user=ieArtTcAAAAJ&amp;citation_for_view=ieArtTcAAAAJ:2osOgNQ5qMEC" target="_blank" rel="external">Chimera: Collaborative Preemption for Multitasking on a Shared GPU</a></p>
<a id="more"></a>
<ul>
<li><p>Keywords:</p>
<ul>
<li><p>Graphics Processing Unit;</p>
</li>
<li><p>Preemptive Multitasking;</p>
</li>
<li><p>ContextSwitch;</p>
</li>
<li><p>Idempotence</p>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="问题的提出"><a href="#问题的提出" class="headerlink" title="问题的提出"></a>问题的提出</h2><blockquote>
<p>Preemptive multitasking on CPUs has been primarily supported through context switching. However, the same preemption strategy incurs substantial overhead due to the large context in GPUs.</p>
</blockquote>
<p>由于GPU的上下文很大，因此上下文切换不适用于GPU的抢占技术</p>
<h2 id="解决方案的提出"><a href="#解决方案的提出" class="headerlink" title="解决方案的提出"></a>解决方案的提出</h2><blockquote>
<p>   we propose Chimera, a collaborative preemption approach that can precisely control the overhead for multitasking on GPUs</p>
</blockquote>
<p>提出Chimera，一种适用于多任务GPU的协作抢占方法，可以精确控制抢占的开销。</p>
<blockquote>
<p>   Chimera can achieve a specified preemption latency while minimizing throughput overhead</p>
</blockquote>
<p>所谓精确控制抢占的开销：实现指定的抢占延时，同时最小化吞吐量。</p>
<blockquote>
<p>   Chimera achieves the goal by intelligently selecting which SMs to preempt and how each thread block will be preempted.</p>
</blockquote>
<p>Chimera具体实现：智能选择抢占哪个SM，以及如何抢占每个线程块<br>综合使用<strong>Flushing</strong>、<strong>Context switching</strong>、<strong>Draining</strong>这三种技术。</p>
<h2 id="本文的contribution"><a href="#本文的contribution" class="headerlink" title="本文的contribution"></a>本文的contribution</h2><ol>
<li><p>分析GPU的刷新条件： 放宽幂等的语义定义</p>
</li>
<li><p>分析 抢占技术（ context switching, draining, and flushing） 与线程运行过程的定量关系</p>
</li>
<li><p>Chimera的实现： 根据不同的抢占技术的开销来智能选择抢占哪个SM以及如何抢占线程块。</p>
</li>
</ol>
<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><blockquote>
<p>   overhead comes in two dimensions: a preempting kernel suffers from a long preemption latency, and the system throughput is wasted during the switch</p>
</blockquote>
<p>这里的开销主要体现两方面： 抢占延时长，系统的吞吐量浪费</p>
<ul>
<li>Context switching</li>
</ul>
<blockquote>
<p>   Context switching stores the context of currently running thread blocks, and preempts an SM with a new kernel.</p>
</blockquote>
<p>Context switching 是保存当前运行线程块的上下文，并用新内核抢占SM。（中规中矩）</p>
<ul>
<li>Draining</li>
</ul>
<blockquote>
<p>   Draining stops issuing new thread blocks to the SM and waits until the SM finishes its currently running thread blocks.</p>
</blockquote>
<p>Draining 是停止分配新线程块给SM，等待当前线程块运行完，再抢占该SM。（彬彬有礼）</p>
<ul>
<li>Flushing</li>
</ul>
<blockquote>
<p>   Flushing drops the execution of running thread blocks and preempts the SM almost instantly.</p>
</blockquote>
<p>Flushing 是取消正在运行的线程块，立即抢占SM（粗暴无礼）。</p>
<h4 id="三种抢占技术不同开销的原因"><a href="#三种抢占技术不同开销的原因" class="headerlink" title="三种抢占技术不同开销的原因"></a>三种抢占技术不同开销的原因</h4><ul>
<li>the estimated preemption latency for each preemption technique.</li>
<li>the estimated throughput overhead for each preemption technique.</li>
</ul>
<blockquote>
<p>the theoretical cost of each preemption technique if a thread block at given progress is preempted</p>
<ul>
<li>The cost of context switching is dependent on the context size and the available bandwidth for an SM, which is almost constant across thread block execution</li>
<li>The cost of draining, which is primarily preemption latency, is dependent on the remaining execution time of a thread block. It decreases toward the end of the thread block progress.</li>
<li>The cost of flushing, on the other hand, is primarily throughput overhead, which is dependent on the work thrown away by flushing.</li>
</ul>
</blockquote>
<p>结论： 采用何种技术更多取决于线程块运行过程的状态，若线程块刚开始运行，采用flushing；若运行到一半，采用contextSwitching；若运行到末尾，采用draining</p>
<h2 id="实现（跟进）"><a href="#实现（跟进）" class="headerlink" title="实现（跟进）"></a>实现（跟进）</h2><h3 id="3-1GPU-Scheduler-with-PreemptiveMultitasking"><a href="#3-1GPU-Scheduler-with-PreemptiveMultitasking" class="headerlink" title="3.1GPU Scheduler with PreemptiveMultitasking"></a>3.1GPU Scheduler with PreemptiveMultitasking</h3><blockquote>
<p>An SM partitioning policy in the kernel scheduler tells howmany SMs each kernelwill run on Chimera consists of two parts: estimating costs of preemption for<br>each technique, and selecting SMs to preempt with corresponding preempting techniques. Chimera can directly compare the estimated cost of each preemption technique</p>
</blockquote>
<h3 id="3-2-Cost-Estimation"><a href="#3-2-Cost-Estimation" class="headerlink" title="3.2 Cost Estimation"></a>3.2 Cost Estimation</h3><p>estimate the cost of each preemption technique precisely for each SM.</p>
<p>First, Chimera measures the total number of executed instructions for each thread block to determine the progress of each thread block</p>
<p>Second, Chimera also measures the progress of each thread block in cycles</p>
<p>instructions-per-cycle (IPC) or cycles-per-instruction (CPI)</p>
<p>estimate the preemption latency of context switching using the same method</p>
<h3 id="3-3-Preemption-Selection"><a href="#3-3-Preemption-Selection" class="headerlink" title="3.3 Preemption Selection"></a>3.3 Preemption Selection</h3><p>how Chimera selects a subset of SMs and techniques to preempt.</p>
<p>The time complexity of algorithm 1 is O(NT logT + NlogN),</p>
<p>Thus, the impact of the selection algorithm in Chimera is negligible to the preemption latency.</p>
<h3 id="3-4-SM-Flushing"><a href="#3-4-SM-Flushing" class="headerlink" title="3.4 SM Flushing"></a>3.4 SM Flushing</h3><p>We relax the idempotence condition by looking at thread blocks individually with the notion of time</p>
<h2 id="实验结果评估"><a href="#实验结果评估" class="headerlink" title="实验结果评估"></a>实验结果评估</h2><h3 id="实验结果数据"><a href="#实验结果数据" class="headerlink" title="实验结果数据"></a>实验结果数据</h3><p>各种表格</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><blockquote>
<p>Evaluations show that Chimera violates the deadline for only 0.2% of preemption requests when a 15µs preemption latency constraint is used. For multi-programmed workloads, Chimera can improve the average normalized turnaround time by 5.5x, and system throughput by 12.2%</p>
</blockquote>
<p>改善平均周转时间和吞吐量。</p>
<h2 id="个人看法"><a href="#个人看法" class="headerlink" title="个人看法"></a>个人看法</h2><ul>
<li>这种综合的抢占技术应对饥饿情况？</li>
<li>采用何种抢占技术的决策时间复杂度是否掩盖Chimera本身抢占优势？<ul>
<li>虽然paper有提到，但感觉还有些讨论的空间余地。<br>……</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://scholar.google.com/citations?view_op=view_citation&amp;amp;hl=en&amp;amp;user=ieArtTcAAAAJ&amp;amp;citation_for_view=ieArtTcAAAAJ:2osOgNQ5qMEC&quot;&gt;Chimera: Collaborative Preemption for Multitasking on a Shared GPU&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="论文" scheme="http://yoursite.com/categories/%E8%AE%BA%E6%96%87/"/>
    
    
      <category term="paper os" scheme="http://yoursite.com/tags/paper-os/"/>
    
  </entry>
  
  <entry>
    <title>LearningReactjs</title>
    <link href="http://yoursite.com/2015/07/19/LearningReactjs/"/>
    <id>http://yoursite.com/2015/07/19/LearningReactjs/</id>
    <published>2015-07-19T07:53:56.000Z</published>
    <updated>2016-11-12T02:30:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://facebook.github.io/react/" target="_blank" rel="external">reactjs</a><br><a href="http://www.reactjs.cn/react/index.html" target="_blank" rel="external">reactjs-cn</a><br><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="external">react-ruanyifeng</a><br><a href="http://blog.csdn.net/rsspub/article/category/1435601" target="_blank" rel="external">react-csdn</a><br><a id="more"></a></p>
<h3 id="html-template"><a href="#html-template" class="headerlink" title="html template"></a>html template</h3><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;../build/JSXTransformer.js&quot;&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id=&quot;example&quot;&gt;&lt;/div&gt;
    &lt;script type=&quot;text/jsx&quot;&gt;
      var names = [&apos;Alice&apos;, &apos;Emily&apos;, &apos;Kate&apos;];

      React.render(
        &lt;div&gt;
        {
          names.map(function (name) {
            return &lt;div&gt;Hello, {name}!&lt;/div&gt;
          })
        }
        &lt;/div&gt;,
        document.getElementById(&apos;example&apos;)
      );
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;reactjs&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.reactjs.cn/react/index.html&quot;&gt;reactjs-cn&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/03/react.html&quot;&gt;react-ruanyifeng&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/rsspub/article/category/1435601&quot;&gt;react-csdn&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="reactjs" scheme="http://yoursite.com/tags/reactjs/"/>
    
  </entry>
  
  <entry>
    <title>vim常用命令小结</title>
    <link href="http://yoursite.com/2015/07/19/vim%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2015/07/19/vim学习笔记/</id>
    <published>2015-07-19T03:43:14.000Z</published>
    <updated>2016-11-12T02:30:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p><code>i</code> insert<br><code>a</code> 光标后插入<br><code>o</code> 当前行后插入新行<br><code>O</code> 当前行前插入新行<br><a id="more"></a></p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p><code>dd</code> 删行</p>
<h3 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h3><p>yy 拷贝当前行<br>y$ copy to end of line</p>
<h3 id="剪切"><a href="#剪切" class="headerlink" title="剪切"></a>剪切</h3><p>D cut to end ot line</p>
<h3 id="粘贴"><a href="#粘贴" class="headerlink" title="粘贴"></a>粘贴</h3><p>p  粘贴</p>
<h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><p>hjkl</p>
<h4 id="头"><a href="#头" class="headerlink" title="头"></a>头</h4><p>0 行头<br>^ 非空白行头<br>gg beginning of file<br>b beginning of word<br>w W word</p>
<h4 id="尾"><a href="#尾" class="headerlink" title="尾"></a>尾</h4><p>$ 行尾<br>g 空白符行尾<br>L end of file<br>e E word end</p>
<h4 id="行"><a href="#行" class="headerlink" title="行"></a>行</h4><p>:n 到第N行<br>n|column n<br>[[ function start<br>[{ block start</p>
<h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p>oy$ 先移到行头，从这里开始拷贝，拷贝到行末<br>y2/foo 拷贝两个foo之间的字符串</p>
<h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><p>esc normal<br>:wq zz 存盘 退出</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>. n <command>重复某命令n次</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;插入&quot;&gt;&lt;a href=&quot;#插入&quot; class=&quot;headerlink&quot; title=&quot;插入&quot;&gt;&lt;/a&gt;插入&lt;/h3&gt;&lt;p&gt;&lt;code&gt;i&lt;/code&gt; insert&lt;br&gt;&lt;code&gt;a&lt;/code&gt; 光标后插入&lt;br&gt;&lt;code&gt;o&lt;/code&gt; 当前行后插入新行&lt;br&gt;&lt;code&gt;O&lt;/code&gt; 当前行前插入新行&lt;br&gt;
    
    </summary>
    
      <category term="术" scheme="http://yoursite.com/categories/%E6%9C%AF/"/>
    
    
      <category term="vim" scheme="http://yoursite.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>git学习笔记3-常用命令</title>
    <link href="http://yoursite.com/2015/07/18/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2015/07/18/git学习笔记3-常用命令/</id>
    <published>2015-07-18T09:15:35.000Z</published>
    <updated>2016-11-12T02:30:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h3><ol>
<li>传统用法：先git add file再git commit -m “xxx”</li>
<li>快速提交当前所有文件的更改：git commit -am “xxx”会先add所有的更改然后提交</li>
<li>快速提交单个文件的更改：git commit file -m “xxx”只提交这个文件的更改</li>
<li>修改最后一次提交：git commit –amend -am “xxx”</li>
<li>提交频繁一点，每次提交包含的更改少一点</li>
<li>运行git commit，这时会打开Git中默认的编辑器（一般是vim），推荐像图5这样添加commit信息<br>其中第一行是简短的信息，第三行是详细的解释，标准就是第一行一目了然，第三行越详细越好。这样做的另一个好处是，Github默认是支持这种书写方式的，在Github的pull request里，默认显示第一行，第三行被折叠，非常方便。并且如果你的pull request只包含这一个commit的话，Github会默认将第一行作为标题，第三行作为内容<a id="more"></a>
</li>
</ol>
<h3 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h3><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><ol>
<li>git checkout 分支名/commit hash<br>切换到相应的分支或commit，加上-b参数则会创建分支并切换过去</li>
<li>checkout  不仅可以跟分支的名称，还可以放commit的hash</li>
</ol>
<h4 id="恢复文件到之前的某个状态（最新的commit）"><a href="#恢复文件到之前的某个状态（最新的commit）" class="headerlink" title="恢复文件到之前的某个状态（最新的commit）"></a>恢复文件到之前的某个状态（最新的commit）</h4><ol>
<li>git checkout [分支名/commit hash/HEAD快捷方式] – 文件名<ul>
<li>恢复指定分支的最新commit或指定commit或快捷方式指向的commit的文件到工作目录，若省略中间的参数，则</li>
<li>暂存区有内容且暂存区内容与工作目录不同，则恢复暂存区的状态到工作目录</li>
<li>暂存区无内容，则恢复HEAD（最新的commit）的状态到工作目录</li>
<li>git checkout branch2 test.txt个（branch2的最新commit的状态被恢复到工作目录并添加到了暂存区）</li>
<li>git checkout HEAD~3 test.txt（比当前的commit早3个commit）</li>
</ul>
</li>
<li>checkout source（从哪里恢复）和target（恢复到哪里去）</li>
</ol>
<h3 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h3><h4 id="git-diff-source-target"><a href="#git-diff-source-target" class="headerlink" title="git diff source target"></a>git diff source target</h4><ol>
<li>target相对于source的变化</li>
<li>source和target可以是commit的hash/分支名/快捷方式</li>
<li>如果只给一个参数，则这个参数就是source，而默认的target是工作目录，如果工作目录clean的话，则target为当前所在分支的最新commit</li>
<li>如果一个参数都不给，默认的source是暂存目录，而target还是工作目录</li>
<li>如果想要使暂存目录作为target的话，需要使用–cached参数</li>
</ol>
<h3 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h3><h4 id="将HEAD状态的文件恢复到了暂存区，工作目录保持不变"><a href="#将HEAD状态的文件恢复到了暂存区，工作目录保持不变" class="headerlink" title="将HEAD状态的文件恢复到了暂存区，工作目录保持不变"></a>将HEAD状态的文件恢复到了暂存区，工作目录保持不变</h4><h4 id="git-reset-commit-hash-分支名-快捷方式-文件名"><a href="#git-reset-commit-hash-分支名-快捷方式-文件名" class="headerlink" title="git reset [commit hash/分支名/快捷方式] [文件名]"></a>git reset [commit hash/分支名/快捷方式] [文件名]</h4><p>类似“git add的反操作”，直接将所在commit的文件状态恢复到暂存区域。省略commit则默认为HEAD，省略文件名默认为所有文件。只改变暂存目录，不改变工作目录，当前commit不变。</p>
<h4 id="git-reset-–soft-commit-hash-分支名-快捷方式-软恢复"><a href="#git-reset-–soft-commit-hash-分支名-快捷方式-软恢复" class="headerlink" title="git reset –soft [commit hash/分支名/快捷方式]软恢复"></a>git reset –soft [commit hash/分支名/快捷方式]软恢复</h4><p>将恢复前所在commit的文件状态恢复到暂存区，当前最新commit为参数中的commit。只改变暂存目录，不改变工作目录，当前commit改变。</p>
<h4 id="git-reset-–hard-commit-hash-分支名-快捷方式-硬恢复"><a href="#git-reset-–hard-commit-hash-分支名-快捷方式-硬恢复" class="headerlink" title="git reset –hard [commit hash/分支名/快捷方式]硬恢复"></a>git reset –hard [commit hash/分支名/快捷方式]硬恢复</h4><p>强制将整个项目恢复为参数中的commit时的文件状态，清空暂存目录，工作目录clean。暂存目录和工作目录同时被改变，当前commit改变。</p>
<h3 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h3><ul>
<li>一般我们把别的分支合并到master时用merge，而把master合并到别的分支时会用到rebase</li>
<li>git rebase 目标分支原理<br>其实是先将HEAD指向目标分支和当前分支的共同祖先commit节点，然后将当前分支上的commit一个一个的apply到目标分支上，apply完以后再将HEAD指向当前分支。</li>
<li>rebase与merge的区别<br>把master分支合并到别的分支用rebase，把别的分支合并到master分支上用merge<br>rebase不会产生多余的commit，并且保持直线</li>
<li>交互模式<br>比如调整commit的顺序啊，合并一些commit啊，删除一些commit啊等等，通过-i参数可以实现，当然这个命令有些复杂，我们可以使用SourceTree的图形化界面更直观的使用它</li>
</ul>
<h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><ol>
<li>如果目标分支是当前分支的祖先commit节点，则merge什么也不会发生，因为当前分支已经是最新的了</li>
<li>如果当前分支是目标分支的祖先commit节点，这时会发生Fast-forward的merge，merge的结果是简单的移动HEAD指针</li>
<li>如果以上两种情况都不是的话，则其实是做的三方合并，除了这两个分支的最新commit以外，另外一个是这两个分支的共同祖先commit点。这种情况下如果没有冲突的话会自动生成一个merge的commit，如果有冲突则手动解决后还是会有一个merge的commit。</li>
</ol>
<h3 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h3><p><code>git checkout -b branch3 1a222c3
git cherry-pick 0bda20e 1a04d5f
git checkout master
git reset --hard 1a222c3</code></p>
<h3 id="查看历史-log"><a href="#查看历史-log" class="headerlink" title="查看历史 log"></a>查看历史 log</h3><h4 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a>git reflog</h4><p>这个命令会输出一个列表，包含HEAD发生的所有变化。</p>
<h4 id="log"><a href="#log" class="headerlink" title="log"></a>log</h4><p>-p<br>-stat<br>git log –pretty=format:’%h was %an, %ar, message: %s’<br>git log –pretty=format:’%h : %s’ –graph<br>git log –pretty=format:’%h : %s’ –topo-order –graph<br>git log –pretty=format:’%h : %s’ –date-order –graph<br>–reverse’参数来逆向显示所有日志。<br>–pretty=oneline/short/format –graph</p>
<h3 id="比较提交-Diff"><a href="#比较提交-Diff" class="headerlink" title="比较提交 Diff"></a>比较提交 Diff</h3><h4 id="git-diff-master-test"><a href="#git-diff-master-test" class="headerlink" title="git diff master..test"></a>git diff master..test</h4><p>只显示两个分支间的差异</p>
<h4 id="git-diff-master…test"><a href="#git-diff-master…test" class="headerlink" title="git diff master…test"></a>git diff master…test</h4><p>找出‘master’,‘test’的共有 父分支和’test’分支之间的差异<br>diff</p>
<h4 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h4><p>显示在当前的工作目录里的，没有 staged(添加到索引中)，且在下次提交时 不会被提交的修改。</p>
<h4 id="git-diff-–cached"><a href="#git-diff-–cached" class="headerlink" title="git diff –cached"></a>git diff –cached</h4><p>显示你当前的索引和上次提交间的差异<br>下次提交时要提交的内容(staged,添加到索引中)</p>
<p>####　git diff HEAD<br>显示你工作目录与上次提交时之间的所有差别</p>
<h4 id="git-diff-test"><a href="#git-diff-test" class="headerlink" title="git diff test"></a>git diff test</h4><p>查看当前的工作目录与另外一个分支的差别</p>
<h4 id="git-diff-HEAD-–-lib"><a href="#git-diff-HEAD-–-lib" class="headerlink" title="git diff HEAD – ./lib"></a>git diff HEAD – ./lib</h4><p>显示你当前工作目录下的lib目录与上次提交之间的差别(或者更准确的 说是在当前分支)</p>
<h4 id="git-diff-–stat"><a href="#git-diff-–stat" class="headerlink" title="git diff –stat"></a>git diff –stat</h4><p>统计一下有哪些文件被改动，有多少行被改动</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;commit&quot;&gt;&lt;a href=&quot;#commit&quot; class=&quot;headerlink&quot; title=&quot;commit&quot;&gt;&lt;/a&gt;commit&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;传统用法：先git add file再git commit -m “xxx”&lt;/li&gt;
&lt;li&gt;快速提交当前所有文件的更改：git commit -am “xxx”会先add所有的更改然后提交&lt;/li&gt;
&lt;li&gt;快速提交单个文件的更改：git commit file -m “xxx”只提交这个文件的更改&lt;/li&gt;
&lt;li&gt;修改最后一次提交：git commit –amend -am “xxx”&lt;/li&gt;
&lt;li&gt;提交频繁一点，每次提交包含的更改少一点&lt;/li&gt;
&lt;li&gt;运行git commit，这时会打开Git中默认的编辑器（一般是vim），推荐像图5这样添加commit信息&lt;br&gt;其中第一行是简短的信息，第三行是详细的解释，标准就是第一行一目了然，第三行越详细越好。这样做的另一个好处是，Github默认是支持这种书写方式的，在Github的pull request里，默认显示第一行，第三行被折叠，非常方便。并且如果你的pull request只包含这一个commit的话，Github会默认将第一行作为标题，第三行作为内容
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git学习笔记2-概念</title>
    <link href="http://yoursite.com/2015/07/14/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02-%E6%A6%82%E5%BF%B5/"/>
    <id>http://yoursite.com/2015/07/14/git学习笔记2-概念/</id>
    <published>2015-07-14T00:19:02.000Z</published>
    <updated>2016-11-12T02:30:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Git会把你的每次提交的文件的全部内容（snapshot）都会记录下来。<br>用来表示项目历史信息的文件，通过一个40个字符的（40-digit）“对象名”来索引<br>每一个“对象名”都是对“对象”内容做SHA1哈希计算得来的，这样就意味着两个不同内容的对象不可能有相同的“对象名”。</p>
<p>###　对象<br>每个对象(object) 包括三个部分：类型，大小和内容。<br>四种类型的对象：”blob”、”tree”、 “commit” 和”tag”。<br><a id="more"></a></p>
<h4 id="查看一个blob对象里的内容"><a href="#查看一个blob对象里的内容" class="headerlink" title="查看一个blob对象里的内容"></a>查看一个blob对象里的内容</h4><p>$ git show 6ff87c4664</p>
<h4 id="查看tree对象"><a href="#查看tree对象" class="headerlink" title="查看tree对象"></a>查看tree对象</h4><p>一个tree对象有一串(bunch)指向blob对象或是其它tree对象的指针，它一般用来表示内容之间的目录层次关系。<br>$ git ls-tree fb3a8bdd0ce</p>
<h4 id="commit对象"><a href="#commit对象" class="headerlink" title="commit对象"></a>commit对象</h4><p>git show -s –pretty=raw 2be7fcb476</p>
<h4 id="tag对象"><a href="#tag对象" class="headerlink" title="tag对象"></a>tag对象</h4><p>git cat-file tag v1.5.0</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>每个目录都创建了 tree对象 (包括根目录), 每个文件都创建了一个对应的 blob对象 . 最后有一个 commit对象 来指向根tree对象(root of trees), 这样我们就可以追踪项目每一项提交内容.</p>
<hr>
<h3 id="Git目录"><a href="#Git目录" class="headerlink" title="Git目录"></a>Git目录</h3><p>所有历史和元信息的目录 - 包括所有的对象(commits,trees,blobs,tags), 这些对象指向不同的分支.</p>
<h3 id="工作目录"><a href="#工作目录" class="headerlink" title="工作目录"></a>工作目录</h3><p>存储着你现在签出(checkout)来用来编辑的文件<br>只用来临时保存签出(checkout) 文件的地方, 你可以编辑工作目录的文件直到下次提交(commit)为止.</p>
<h3 id="Git索引"><a href="#Git索引" class="headerlink" title="Git索引"></a>Git索引</h3><p>在你的工作目录和项目仓库间的暂存区(staging area)<br>创建了一个提交(commit), 那么提交的是当前索引(index)里的内容, 而不是工作目录中的内容.<br> git status 命令是查看索引内容<br> 哪些文件被暂存了(就是在你的Git索引中), 哪些文件被修改了但是没有暂存, 还有哪些文件没有被跟踪(untracked).</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git会把你的每次提交的文件的全部内容（snapshot）都会记录下来。&lt;br&gt;用来表示项目历史信息的文件，通过一个40个字符的（40-digit）“对象名”来索引&lt;br&gt;每一个“对象名”都是对“对象”内容做SHA1哈希计算得来的，这样就意味着两个不同内容的对象不可能有相同的“对象名”。&lt;/p&gt;
&lt;p&gt;###　对象&lt;br&gt;每个对象(object) 包括三个部分：类型，大小和内容。&lt;br&gt;四种类型的对象：”blob”、”tree”、 “commit” 和”tag”。&lt;br&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git学习笔记1-基本流程</title>
    <link href="http://yoursite.com/2015/07/13/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01-%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2015/07/13/git学习笔记1-基本流程/</id>
    <published>2015-07-13T15:48:17.000Z</published>
    <updated>2016-11-12T02:30:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>msysgit<br>github gitlab codning.net</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>生成公私匙：ssh -keygen<br>拷贝公匙：cat ~/.ssh/id_rsa.pub<br>gitlab上添加刚刚拷贝的公匙: add ssh keys<br>验证公匙是否正确：ssh -T gitUrl<br>git remote add origin gitUrl</p>
<h3 id="克隆代码"><a href="#克隆代码" class="headerlink" title="克隆代码"></a>克隆代码</h3><p>git clone gitUrl<br><a id="more"></a></p>
<h3 id="开发之前"><a href="#开发之前" class="headerlink" title="开发之前"></a>开发之前</h3><p>创建分支，并追踪远程同名分支<br>git branch yzhen –track origin/yzhen<br>切换分支<br>git checkout yzhen</p>
<h3 id="新开发之前"><a href="#新开发之前" class="headerlink" title="新开发之前"></a>新开发之前</h3><p>git fetch<br>git rebase origin/master</p>
<h3 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h3><p>touch hello.txt<br>echo “# LexyuBlog” &gt;&gt; README.md<br>添加到暂存区<br>git add hello.txt<br>提交到仓库并注释<br>git commit -m’msg’<br>查看文件修改状态<br>git status</p>
<h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><p>git fetch<br>(git stash)<br>git rebase origin/master<br>(conflict; git add; rebase -continue/–abort )<br>git push -f origin yzhen<br>-u<br>(git stash list;git stash apply)</p>
<p>request code review</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h3&gt;&lt;p&gt;msysgit&lt;br&gt;github gitlab codning.net&lt;/p&gt;
&lt;h3 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h3&gt;&lt;p&gt;生成公私匙：ssh -keygen&lt;br&gt;拷贝公匙：cat ~/.ssh/id_rsa.pub&lt;br&gt;gitlab上添加刚刚拷贝的公匙: add ssh keys&lt;br&gt;验证公匙是否正确：ssh -T gitUrl&lt;br&gt;git remote add origin gitUrl&lt;/p&gt;
&lt;h3 id=&quot;克隆代码&quot;&gt;&lt;a href=&quot;#克隆代码&quot; class=&quot;headerlink&quot; title=&quot;克隆代码&quot;&gt;&lt;/a&gt;克隆代码&lt;/h3&gt;&lt;p&gt;git clone gitUrl&lt;br&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>毕业啦</title>
    <link href="http://yoursite.com/2015/07/12/%E6%AF%95%E4%B8%9A%E5%95%A6/"/>
    <id>http://yoursite.com/2015/07/12/毕业啦/</id>
    <published>2015-07-12T04:18:05.000Z</published>
    <updated>2017-01-31T12:51:03.000Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=255870&auto=0&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;http://music.163.com/outchain/player?type=
    
    </summary>
    
    
      <category term="里程碑" scheme="http://yoursite.com/tags/%E9%87%8C%E7%A8%8B%E7%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>《JS启示录》笔记</title>
    <link href="http://yoursite.com/2015/03/24/%E3%80%8AJS%E5%90%AF%E7%A4%BA%E5%BD%95%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    <id>http://yoursite.com/2015/03/24/《JS启示录》读后感/</id>
    <published>2015-03-23T23:51:49.000Z</published>
    <updated>2016-11-12T02:30:35.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>此书让你深入了解JS对象，JS几乎所有东西都是对象或用起来像对象</li>
</ul>
<hr>
<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><ul>
<li>自定义构造函数，保持名称第一个字母大写</li>
<li>字面量表达式创建对象<br>{},[]创建的是对象<br>1,’string’,true,创建的是原始值</li>
<li>new关键字调用构造函数的语法来创建对象<br>new Number()<br>new String()<br>new Boolean() 创建的是对象<br>Number()<br>String()<br>Boolean() 没有new关键字的，则创建的是原始值<a id="more"></a></li>
<li>null undefined是原始值</li>
<li>原始值 按值复制；对象 按引用存储，===比较是否指向同一个对象</li>
<li><p>构造函数实例都拥有指向其构造函数的constructor属性，instanceof只适用于构造函数创建返回的复杂对象和实例</p>
</li>
<li><p>相较于点，中括号可用来访问特殊名的属性</p>
</li>
<li>in可坚持一个对象的属性，包括原型链；hasOwnProperty()可检查来自非原型链属性的对象</li>
</ul>
<h3 id="Chapter4-函数"><a href="#Chapter4-函数" class="headerlink" title="Chapter4 函数"></a>Chapter4 函数</h3><ul>
<li>函数返回值默认undefined，构造函数返回值为对象实例</li>
<li>函数是对象，因为可有属性，是个值（最终返回值）</li>
<li>this arguments适用于所有函数，argums.callee</li>
<li>函数定义有三种<ul>
<li>函数构造函数new Function()</li>
<li>函数语句function a(){}</li>
<li>函数表达式var a =  function(){}</li>
</ul>
</li>
<li>调用函数，call(),apply()区别是参数传递的不同，前者传递多个分开的参数，后者传递多个参数组成的数组</li>
<li>自调用的<em>函数表达式</em>，若要立即调用函数，需在函数外面的圆括号，或任何将函数转换为表达式的符号。<br>(function (){}()) ,(function (){})(),!function (){}()，var a = function (){}()<br>function (){}()不会立即执行</li>
<li>函数表达式没有被提升，只有函数语句被提升，即函数定义前可被调用</li>
</ul>
<h3 id="Chapter5-head-全局对象"><a href="#Chapter5-head-全局对象" class="headerlink" title="Chapter5 head/全局对象"></a>Chapter5 head/全局对象</h3><ul>
<li>head对象，包含所有对象的对象浏览器是window，this</li>
<li>全局对象，全局属性是直接包含在head对象内不的值</li>
<li>显示引用head，性能代价高，若只依靠作用域链，避免显示引用head会更快</li>
</ul>
<h3 id="Chapter6-this"><a href="#Chapter6-this" class="headerlink" title="Chapter6 this"></a>Chapter6 this</h3><ul>
<li>this在函数内部使用，引用包含函数的对象</li>
<li>自定义构造函数：new，this指对象实例；若没有new，this是上下文</li>
<li>call apply，控制this值</li>
<li>this的宿主函数北封装在另一个函数内或另一个函数的上下文中被调用，this永远是对head对象的引用；可在父函数that保留this引用</li>
<li>构造函数的prototype属性的函数中使用this，this引用调用方法的实例</li>
</ul>
<h3 id="Chapter7-作用域-amp-闭包"><a href="#Chapter7-作用域-amp-闭包" class="headerlink" title="Chapter7 作用域&amp;闭包"></a>Chapter7 作用域&amp;闭包</h3><ul>
<li>作用域是执行代码的上下文，js作用域包括全局作用域，函数作用域，eval作用域</li>
<li>作用域链（词法作用域）：包含函数的函数，会创建堆栈执行作用域，这些链接在一起的栈称为作用域链；</li>
<li>var vs 全局作用域</li>
<li>函数定义时确定作用域，而非调用时确定，所以又叫词法作用域</li>
<li>闭包：让函数向全局作用域返回一个嵌套函数，但该函数仍能通过作用域链访问其父函数的作用域；闭包是由作用域链引起的<ul>
<li>作用域链式基于代码的编写方式创建的，而不是基于调用函数所在的上下文，这使得函数即使从一个不同的上下文调用函数，也能够访问最初编写代码时所在的作用域，这称为闭包。</li>
</ul>
</li>
</ul>
<h3 id="Chapter8-函数原型属性"><a href="#Chapter8-函数原型属性" class="headerlink" title="Chapter8 函数原型属性"></a>Chapter8 函数原型属性</h3><ul>
<li>原型链 最后是Object.prototype</li>
<li>默认的prototype属性是Object()对象</li>
<li>myArray.<em>proto</em>或myArray.constructor.prototype引用Array.prototype</li>
<li>用新对象替换prototype属性回删除默认构造函数属性，constructor</li>
<li>Array.prototype={},myArray.constructor===Object();所以要Array.prototype={constructor:Array};</li>
<li>用新对象替换prototype属性不会更新以前的实例：Array.prototype={a:1}不会更新；Array.prototype.a=2会更新</li>
<li>原型继承链，实例化想要继承的对象，将该对象实例作为要继承该对象实例的函数的prototype属性值，eg:<br><code>var Person = function () {
}
var Chef = function () {
}
Chef.prototype = new Person();
var cody = new Chef()</code></li>
</ul>
<h3 id="Chapter12-Boolean"><a href="#Chapter12-Boolean" class="headerlink" title="Chapter12 Boolean()"></a>Chapter12 Boolean()</h3><ul>
<li>Boolean(0 -0 null false NAN undefined “”) 都是false</li>
<li>非原始false布尔对象转换为true，eg:<br><code>Boolean(&#39;false&#39;)//true
var falseValue=new Boolean(false);
if(falseValue){console.log(&#39;falseValue is truthy&#39;);}</code></li>
</ul>
<h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><ul>
<li>直接在原始数字上访问属性时，该值被当作对象之前必须进行评估，1..toString()，第一个点被认为是数字十进制的小数点；临时包装器对象</li>
<li>null可表明属性拥有一个空值，等待赋值；typeof null返回object,===null 来判断，==无法区分null和undefined</li>
<li>undefined告诉你有东西丢失了；永远不要将一个值设置为undefined，若制定一个属性或变量值不可用，应为null<ul>
<li>声明的变量未指定值</li>
<li>试图访问的对象属性未定义，并且不存在于原型链</li>
</ul>
</li>
<li><code>undefined in this</code>全局作用域定义undefined</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;此书让你深入了解JS对象，JS几乎所有东西都是对象或用起来像对象&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;自定义构造函数，保持名称第一个字母大写&lt;/li&gt;
&lt;li&gt;字面量表达式创建对象&lt;br&gt;{},[]创建的是对象&lt;br&gt;1,’string’,true,创建的是原始值&lt;/li&gt;
&lt;li&gt;new关键字调用构造函数的语法来创建对象&lt;br&gt;new Number()&lt;br&gt;new String()&lt;br&gt;new Boolean() 创建的是对象&lt;br&gt;Number()&lt;br&gt;String()&lt;br&gt;Boolean() 没有new关键字的，则创建的是原始值
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>跨域请求</title>
    <link href="http://yoursite.com/2015/03/24/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
    <id>http://yoursite.com/2015/03/24/跨域请求/</id>
    <published>2015-03-23T23:47:49.000Z</published>
    <updated>2016-11-12T02:30:35.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="What"><a href="#What" class="headerlink" title="What"></a>What</h5><ul>
<li>不同域名下的数据交互</li>
<li>跨域有两种情况：<ul>
<li>子域b.a，主域a</li>
<li>域名不同，但IP地址相同</li>
</ul>
</li>
</ul>
<h5 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h5><ul>
<li>考虑到安全策略，ajax无法跨域</li>
<li><strong>JSONP</strong></li>
<li>html5:<strong>postMessage</strong></li>
<li>window.name<strong>代理</strong>，安全不暴露，a-&gt;代理-&gt;b</li>
<li>（后台）服务器代理：XMLHttpRequest代理文件</li>
<li>子域 主域，document.domain=’a.com’</li>
<li>flash方法</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;What&quot;&gt;&lt;a href=&quot;#What&quot; class=&quot;headerlink&quot; title=&quot;What&quot;&gt;&lt;/a&gt;What&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;不同域名下的数据交互&lt;/li&gt;
&lt;li&gt;跨域有两种情况：&lt;ul&gt;
&lt;li&gt;子域b.a，主域a&lt;/li&gt;
&lt;li&gt;
    
    </summary>
    
    
      <category term="前端知识点" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>webstorm配置</title>
    <link href="http://yoursite.com/2015/02/06/webstorm%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2015/02/06/webstorm配置/</id>
    <published>2015-02-06T11:12:18.000Z</published>
    <updated>2016-11-12T02:30:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li>资源<ul>
<li>下载<a href="http://pan.baidu.com/s/1pJG7haF" target="_blank" rel="external">webstorm</a>（中文破解版, 密码：jytp）</li>
</ul>
</li>
</ul>
<h2 id="live-edit"><a href="#live-edit" class="headerlink" title="live edit"></a>live edit</h2><ul>
<li>步骤<a id="more"></a>
<ul>
<li>webstorm,Run-&gt;Run/DebugConfigtions-&gt;JavascriptDebug</li>
<li>Unnamed-&gt;Browsers:Chrome,Url:localhost:3000</li>
<li>Debug Unnamed</li>
</ul>
</li>
<li>资源<ul>
<li><a href="http://outofmemory.cn/wr/?u=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fdetail%2Fjetbrains-ide-support%2Fhmhgeddbohgjknpmjagkdomcpobmllji" target="_blank" rel="external">JetBrains IDE Suport</a></li>
<li><a href="https://app.yinxiang.com/Home.action?__fp=X6TM5RoKyL43yWPvuidLz-TPR6I9Jhx8&amp;username=yzhen01.zy%40gmail.com&amp;showSwitchService=true&amp;rememberMe=true&amp;login=%E7%99%BB%E5%BD%95&amp;login=true&amp;_sourcePage=zclWBmUe3cTiMUD9T65RG_YvRLZ-1eYO3fqfqRu0fynRL_1nukNa4gH1t86pc1SP#n=29f54950-d897-4782-975e-183a43148a25&amp;ses=4&amp;sh=2&amp;" target="_blank" rel="external">WebStorm live edit功能与浏览器实现同步实现步骤<br>plugin</a></li>
</ul>
</li>
</ul>
<h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><ul>
<li>步骤<ul>
<li>settings-&gt;plugin-&gt;ideavim-&gt;reboot</li>
</ul>
</li>
<li>资源<ul>
<li><a href="https://plugins.jetbrains.com/plugin/164" target="_blank" rel="external">IdeaVim</a></li>
<li>WebStorm安装Vim以及快捷键设置</li>
<li><a href="http://coolshell.cn/articles/5426.html" target="_blank" rel="external">简明 Vim 练级攻略</a></li>
</ul>
</li>
</ul>
<h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><ul>
<li>步骤<ul>
<li>settings-&gt;git-&gt;path</li>
<li>settings-&gt;git-&gt;Github</li>
<li>vcs-&gt;create git respository-&gt;share project on github</li>
<li>vcs-&gt;get from github</li>
</ul>
</li>
<li>资源<ul>
<li><a href="http://www.cnblogs.com/by1990/archive/2013/02/19/2916860.html" target="_blank" rel="external">使用WebStorm和Git开发Node.js应用</a></li>
<li><a href="http://www.tuicool.com/articles/7nQbIf" target="_blank" rel="external">git集成—Webstorm入门指南</a></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;资源&lt;ul&gt;
&lt;li&gt;下载&lt;a href=&quot;http://pan.baidu.com/s/1pJG7haF&quot;&gt;webstorm&lt;/a&gt;（中文破解版, 密码：jytp）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;live-edit&quot;&gt;&lt;a href=&quot;#live-edit&quot; class=&quot;headerlink&quot; title=&quot;live edit&quot;&gt;&lt;/a&gt;live edit&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;步骤
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>游京城-Part2</title>
    <link href="http://yoursite.com/2015/01/19/%E6%B8%B8%E4%BA%AC%E5%9F%8E-Part2/"/>
    <id>http://yoursite.com/2015/01/19/游京城-Part2/</id>
    <published>2015-01-19T14:42:50.000Z</published>
    <updated>2017-01-31T12:51:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="景点"><a href="#景点" class="headerlink" title="景点"></a>景点</h1><h2 id="百姓人家"><a href="#百姓人家" class="headerlink" title="百姓人家"></a>百姓人家</h2><h3 id="胡同"><a href="#胡同" class="headerlink" title="胡同"></a>胡同</h3><p>胡同故事，人情暖融。</p>
<h3 id="什刹海，后海酒吧街"><a href="#什刹海，后海酒吧街" class="headerlink" title="什刹海，后海酒吧街"></a>什刹海，后海酒吧街</h3><p>拉客猖狂，反而吓到。</p>
<h3 id="南锣鼓巷，护国寺，琉璃厂胡同"><a href="#南锣鼓巷，护国寺，琉璃厂胡同" class="headerlink" title="南锣鼓巷，护国寺，琉璃厂胡同"></a>南锣鼓巷，护国寺，琉璃厂胡同</h3><p>精美饰品，小吃。</p>
<h3 id="大栅栏"><a href="#大栅栏" class="headerlink" title="大栅栏"></a>大栅栏</h3><p>老字号古店云集。<br><a id="more"></a></p>
<h2 id="古代皇家1"><a href="#古代皇家1" class="headerlink" title="古代皇家1"></a>古代皇家1</h2><h3 id="故宫"><a href="#故宫" class="headerlink" title="故宫"></a>故宫</h3><p>讲解器不胜导游生动，未见冷宫。天安门，殿，御花园，甚多不解，值得回味。<br>恶补纪录片、紫禁城、甄嬛传。<br><a href="http://www.bilibili.com/video/av369103/" target="_blank" rel="external">国家地理：透视紫禁城</a><br><a href="http://www.bilibili.com/video/av1156017/#" target="_blank" rel="external">央视纪录片《故宫 The Palace Museum》2005</a><br><a href="http://www.bilibili.com/video/av1458232/#" target="_blank" rel="external">当卢浮宫遇见紫禁城</a></p>
<h3 id="景山"><a href="#景山" class="headerlink" title="景山"></a>景山</h3><p>护城河挖土而堆，登高俯视紫禁城，一派庄严气象依旧。</p>
<h3 id="恭王府"><a href="#恭王府" class="headerlink" title="恭王府"></a>恭王府</h3><p>福，和珅，恭亲王，小家碧玉。</p>
<h3 id="雍和宫"><a href="#雍和宫" class="headerlink" title="雍和宫"></a>雍和宫</h3><p>未去，遗憾。</p>
<h3 id="国子监"><a href="#国子监" class="headerlink" title="国子监"></a>国子监</h3><p>未去，遗憾。</p>
<h2 id="古代皇家2"><a href="#古代皇家2" class="headerlink" title="古代皇家2"></a>古代皇家2</h2><h3 id="天坛"><a href="#天坛" class="headerlink" title="天坛"></a>天坛</h3><p>去时已晚，外周闲逛。古黄祭天之隆重。</p>
<h3 id="长城"><a href="#长城" class="headerlink" title="长城"></a>长城</h3><p>滑车不值，应直登北一楼。</p>
<h3 id="十三陵"><a href="#十三陵" class="headerlink" title="十三陵"></a>十三陵</h3><p>未去，遗憾。</p>
<h2 id="古代皇家3"><a href="#古代皇家3" class="headerlink" title="古代皇家3"></a>古代皇家3</h2><h3 id="颐和园"><a href="#颐和园" class="headerlink" title="颐和园"></a>颐和园</h3><p>导游热情，上山下山，佛念。</p>
<h3 id="佛香阁"><a href="#佛香阁" class="headerlink" title="佛香阁"></a>佛香阁</h3><p>登高远望，慈禧败家？</p>
<h3 id="圆明园"><a href="#圆明园" class="headerlink" title="圆明园"></a>圆明园</h3><p>湖面结冰，柳枝无叶，荷花无影，夕阳金晖，清幽肃杀。</p>
<h3 id="清华北大"><a href="#清华北大" class="headerlink" title="清华北大"></a>清华北大</h3><p>故友重逢，黑夜水木。</p>
<h2 id="现代坐标"><a href="#现代坐标" class="headerlink" title="现代坐标"></a>现代坐标</h2><h3 id="鸟巢水立方"><a href="#鸟巢水立方" class="headerlink" title="鸟巢水立方"></a>鸟巢水立方</h3><p>人少，建筑没想象中大。</p>
<h3 id="三里屯"><a href="#三里屯" class="headerlink" title="三里屯"></a>三里屯</h3><p>未去，遗憾</p>
<h3 id="大裤衩"><a href="#大裤衩" class="headerlink" title="大裤衩"></a>大裤衩</h3><p>玲珑晶透，夜色高可仰</p>
<h3 id="世贸天阶"><a href="#世贸天阶" class="headerlink" title="世贸天阶"></a>世贸天阶</h3><p>LED未亮，遗憾。</p>
<h3 id="798艺术区"><a href="#798艺术区" class="headerlink" title="798艺术区"></a>798艺术区</h3><p>未去，遗憾。</p>
<h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><h2 id="溜冰"><a href="#溜冰" class="headerlink" title="溜冰"></a>溜冰</h2><p>结冰湖面滑，旁边有流水。</p>
<h2 id="滑雪"><a href="#滑雪" class="headerlink" title="滑雪"></a>滑雪</h2><p>工作日的团购便宜，鞋子装备笨重，教练推销积极。<br>度娘自学，滑雪技巧：鞋子钩住雪稳定；刹车为内八字；左转重心放右脚，右转重心放左脚；下滑双膝微曲；感受爽意。</p>
<h2 id="东来顺"><a href="#东来顺" class="headerlink" title="东来顺"></a>东来顺</h2><p>团购便宜，清真题字。</p>
<h2 id="面茶椒盐"><a href="#面茶椒盐" class="headerlink" title="面茶椒盐"></a>面茶椒盐</h2><p>如何喝面茶，很是讲究。需放椒盐，不用匙，沿碗喝。</p>
<h2 id="吴裕泰茶雪糕"><a href="#吴裕泰茶雪糕" class="headerlink" title="吴裕泰茶雪糕"></a>吴裕泰茶雪糕</h2><p>茶味浓郁，真材实料。</p>
<h2 id="都一处烧麦"><a href="#都一处烧麦" class="headerlink" title="都一处烧麦"></a>都一处烧麦</h2><p>52元/笼，小贵。</p>
<h2 id="稻花村"><a href="#稻花村" class="headerlink" title="稻花村"></a>稻花村</h2><p>35元/斤，价格不统一，小贵。</p>
<h2 id="美食补习"><a href="#美食补习" class="headerlink" title="美食补习"></a>美食补习</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=5258766&auto=0&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;景点&quot;&gt;&lt;a href=&quot;#景点&quot; class=&quot;headerlink&quot; title=&quot;景点&quot;&gt;&lt;/a&gt;景点&lt;/h1&gt;&lt;h2 id=&quot;百姓人家&quot;&gt;&lt;a href=&quot;#百姓人家&quot; class=&quot;headerlink&quot; title=&quot;百姓人家&quot;&gt;&lt;/a&gt;百姓人家&lt;/h2&gt;&lt;h3 id=&quot;胡同&quot;&gt;&lt;a href=&quot;#胡同&quot; class=&quot;headerlink&quot; title=&quot;胡同&quot;&gt;&lt;/a&gt;胡同&lt;/h3&gt;&lt;p&gt;胡同故事，人情暖融。&lt;/p&gt;
&lt;h3 id=&quot;什刹海，后海酒吧街&quot;&gt;&lt;a href=&quot;#什刹海，后海酒吧街&quot; class=&quot;headerlink&quot; title=&quot;什刹海，后海酒吧街&quot;&gt;&lt;/a&gt;什刹海，后海酒吧街&lt;/h3&gt;&lt;p&gt;拉客猖狂，反而吓到。&lt;/p&gt;
&lt;h3 id=&quot;南锣鼓巷，护国寺，琉璃厂胡同&quot;&gt;&lt;a href=&quot;#南锣鼓巷，护国寺，琉璃厂胡同&quot; class=&quot;headerlink&quot; title=&quot;南锣鼓巷，护国寺，琉璃厂胡同&quot;&gt;&lt;/a&gt;南锣鼓巷，护国寺，琉璃厂胡同&lt;/h3&gt;&lt;p&gt;精美饰品，小吃。&lt;/p&gt;
&lt;h3 id=&quot;大栅栏&quot;&gt;&lt;a href=&quot;#大栅栏&quot; class=&quot;headerlink&quot; title=&quot;大栅栏&quot;&gt;&lt;/a&gt;大栅栏&lt;/h3&gt;&lt;p&gt;老字号古店云集。&lt;br&gt;
    
    </summary>
    
      <category term="游" scheme="http://yoursite.com/categories/%E6%B8%B8/"/>
    
    
      <category term="北京" scheme="http://yoursite.com/tags/%E5%8C%97%E4%BA%AC/"/>
    
  </entry>
  
  <entry>
    <title>游京城-Part1</title>
    <link href="http://yoursite.com/2015/01/12/%E6%B8%B8%E4%BA%AC%E5%9F%8E-Part1/"/>
    <id>http://yoursite.com/2015/01/12/游京城-Part1/</id>
    <published>2015-01-12T15:21:31.000Z</published>
    <updated>2017-01-31T12:51:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>对京城的留恋，在于它每片砖瓦背后的历史沉淀。<br><a id="more"></a></p>
<h1 id="第一次坐飞机"><a href="#第一次坐飞机" class="headerlink" title="第一次坐飞机"></a>第一次坐飞机</h1><p>行李准备：一次性纸巾，沐浴露护肤品试用装，保湿面膜；手绘地图，地铁图，查好每个地标的地铁站；学生证；北京特产手信价格地点查找。<br>托运常识，座位选择，空姐服务，换乘大巴。</p>
<h1 id="北京的天气"><a href="#北京的天气" class="headerlink" title="北京的天气"></a>北京的天气</h1><p>诗人尹丽川说:“一下雪,北京就变成了北平。”<br>可惜无缘北平。<br>与北冬作比，南寒走心。</p>
<h1 id="北京话和身高"><a href="#北京话和身高" class="headerlink" title="北京话和身高"></a>北京话和身高</h1><p>身处京城，纯正京片子包围，儿话音和吞声。<br>老北京话说得太溜，难以听清。<br>方言也是一门学问，听其口音，识其人一二。<br>因身高，被误认北方；因口音，被误认台湾，囧。<br>出外可仰视部分人。<br>回来狂听“阿龙说北京”节目。</p>
<h1 id="住宿"><a href="#住宿" class="headerlink" title="住宿"></a>住宿</h1><p>古韵青旅，赞！<br>镖局四合院，过把瘾。<br>胡同，莫名亲切。</p>
<h1 id="交通"><a href="#交通" class="headerlink" title="交通"></a>交通</h1><p>地铁的标志，不及广州明显。<br>老旧地铁线，无防护门。<br>公交下车需打卡，有售票员。<br>需安检，古今政治中心，安全之重。</p>
<h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>对它，我还有太多的不了解。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=382274&auto=0&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对京城的留恋，在于它每片砖瓦背后的历史沉淀。&lt;br&gt;
    
    </summary>
    
      <category term="游" scheme="http://yoursite.com/categories/%E6%B8%B8/"/>
    
    
      <category term="北京" scheme="http://yoursite.com/tags/%E5%8C%97%E4%BA%AC/"/>
    
  </entry>
  
  <entry>
    <title>网站收集</title>
    <link href="http://yoursite.com/2015/01/04/%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/"/>
    <id>http://yoursite.com/2015/01/04/网站收集/</id>
    <published>2015-01-04T02:07:51.000Z</published>
    <updated>2016-11-12T02:30:35.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前端素材"><a href="#前端素材" class="headerlink" title="前端素材"></a>前端素材</h4><ul>
<li><a href="http://www.css88.com/" target="_blank" rel="external">web前端开发</a></li>
<li><a href="http://f2e.im/" target="_blank" rel="external">前端技术社区</a></li>
<li><a href="http://www.feweekly.com/" target="_blank" rel="external">前端周刊</a></li>
<li><a href="http://www.jqueryfuns.com/" target="_blank" rel="external">jqueryfun</a></li>
<li><a href="http://www.w3cfuns.com/feres.php" target="_blank" rel="external">w3cfun</a></li>
<li><a href="http://enjoycss.com/" target="_blank" rel="external">CSS3Generator</a></li>
<li><a href="http://www.dglives.com/category/%E5%BB%BA%E7%AB%99%E7%AC%94%E8%AE%B0" target="_blank" rel="external">前端资源</a></li>
<li><a href="http://codepen.io/" target="_blank" rel="external">codepen</a></li>
<li><a href="http://www.uisdc.com/" target="_blank" rel="external">uisdc设计</a></li>
<li><a href="http://ued.taobao.org/blog/" target="_blank" rel="external">淘宝UED</a></li>
<li><a href="http://www.alloyteam.com/" target="_blank" rel="external">TencentUED</a></li>
<li><a href="http://www.wtfjs.com" target="_blank" rel="external">fs诡异和奇特特性</a></li>
<li><a href="http://es6.ruanyifeng.com/#docs/let" target="_blank" rel="external">es6-阮一峰</a></li>
<li><a href="http://xianguo.com/" target="_blank" rel="external">鲜果订阅</a><a id="more"></a></li>
<li><a href="http://tympanus.net/codrops/css_reference/" target="_blank" rel="external">css属性指南</a></li>
<li><a href="https://sitthetest.com/tests" target="_blank" rel="external">js测验</a><h4 id="node"><a href="#node" class="headerlink" title="node"></a>node</h4></li>
<li><a href="http://nodejs.cn/api" target="_blank" rel="external">nodejs.api</a></li>
<li><a href="http://nodeapi.ucdok.com/#/api/" target="_blank" rel="external">nodejs.api2</a></li>
<li><a href="http://cnodejs.org" target="_blank" rel="external">cnode中文社区</a></li>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="external">node入门</a></li>
<li><a href="http://www.crimx.com/2014/05/22/learn-node-js-completely-and-with-confidence/" target="_blank" rel="external">不侧漏精通node</a></li>
<li><a href="http://meanjs.org" target="_blank" rel="external">meanjs</a></li>
<li><a href="http://mean.io/#!/" target="_blank" rel="external">mean.io</a></li>
</ul>
<h4 id="angular"><a href="#angular" class="headerlink" title="angular"></a>angular</h4><ul>
<li><a href="https://docs.angularjs.org/tutorial/step_00" target="_blank" rel="external">angular.org</a></li>
<li><a href="http://www.angularjstutorial.com/" target="_blank" rel="external">angularjstutorial</a></li>
<li><a href="https://thinkster.io/a-better-way-to-learn-angularjs/" target="_blank" rel="external">a-better-way-to-learn-angularjs/</a></li>
<li><a href="http://www.toptal.com/angular-js/a-step-by-step-guide-to-your-first-angularjs-app" target="_blank" rel="external">a-step-by-step-guide-to-your-first-angularjs-app</a></li>
<li><a href="https://www.airpair.com/angularjs" target="_blank" rel="external">a community of AngularJS experts</a></li>
<li><a href="http://angularjs.cn/" target="_blank" rel="external">angular中文社区</a></li>
<li><a href="http://www.ngnice.com/" target="_blank" rel="external">angularjs经验分享平台</a></li>
<li><a href="http://www.bootcdn.cn/angular.js/" target="_blank" rel="external">angularjsCDN</a></li>
</ul>
<h4 id="视野"><a href="#视野" class="headerlink" title="视野"></a>视野</h4><ul>
<li><a href="http://teahour.fm/" target="_blank" rel="external">teaHour</a></li>
<li><a href="http://v.163.com/movie/2010/3/9/K/M6U6LS8CV_M6U6NDE9K.html" target="_blank" rel="external">网易公开课</a></li>
<li><a href="https://app.yinxiang.com/Home.action#ses=4&amp;sh=2&amp;sds=3&amp;" target="_blank" rel="external">印象笔记</a></li>
<li><a href="https://bbc3.azurewebsites.net/zhongwen/simp#" target="_blank" rel="external">BBC-zh</a></li>
<li><a href="http://www.a-hospital.com/w/%E9%A6%96%E9%A1%B5" target="_blank" rel="external">医学百科</a></li>
<li><a href="http://feedly.com/i/my" target="_blank" rel="external">feedly-rss订阅</a></li>
<li><a href="http://www.iplaysoft.com/" target="_blank" rel="external">异次元软件世界</a></li>
</ul>
<h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><ul>
<li><a href="https://pomotodo.com/app/" target="_blank" rel="external">土豆番茄</a></li>
<li><a href="https://www.mindmeister.com" target="_blank" rel="external">mindMap</a></li>
<li><a href="http://naotu.baidu.com/edit.html" target="_blank" rel="external">百度脑图</a></li>
<li><a href="http://www.bitbug.net/" target="_blank" rel="external">icon制作国内</a></li>
<li><a href="http://www.faviconer.com/icon/index" target="_blank" rel="external">icon制作国外</a></li>
<li><a href="http://maxiang.info/" target="_blank" rel="external">evernote&amp;md</a></li>
<li><a href="https://stackedit.io/editor" target="_blank" rel="external">在线编辑markdown-英文版</a></li>
<li><a href="http://johnmacfarlane.net/pandoc/try/" target="_blank" rel="external">pandoc-md转换-背墙</a></li>
<li><a href="https://bitbucket.org/" target="_blank" rel="external">bitbucket</a></li>
<li><a href="http://www.apicloud.com/dev" target="_blank" rel="external">apiCloud</a></li>
<li><a href="https://gitcafe.com/explore" target="_blank" rel="external">gitcafe</a></li>
</ul>
<h4 id="编程资料"><a href="#编程资料" class="headerlink" title="编程资料"></a>编程资料</h4><ul>
<li><a href="http://overapi.com/" target="_blank" rel="external">apiDocument</a></li>
<li><a href="http://www.publicapis.com/" target="_blank" rel="external">API</a></li>
<li><a href="http://www.w3cschool.cc/jqueryui/api-easings.html" target="_blank" rel="external">w3cc</a></li>
<li><a href="http://learnxinyminutes.com" target="_blank" rel="external">learnXInYMinutes</a></li>
<li><a href="http://ideone.com/" target="_blank" rel="external">ideone</a></li>
<li><a href="http://www.tutorialspoint.com/codingground.htm" target="_blank" rel="external">codingGround in many languages</a></li>
<li><a href="https://egghead.io/" target="_blank" rel="external">egghead的Angular视频</a></li>
<li><a href="http://www.lagmonster.org/docs/vi.html" target="_blank" rel="external">vi</a></li>
<li><a href="http://es6-features.org/#Constants" target="_blank" rel="external">es6-features比對</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference" target="_blank" rel="external">火狐js文檔</a></li>
</ul>
<h4 id="团队协作"><a href="#团队协作" class="headerlink" title="团队协作"></a>团队协作</h4><ul>
<li><a href="http://coding.net" target="_blank" rel="external">coding.net</a></li>
<li><a href="https://www.teambition.com/projects?p=index&amp;s=" target="_blank" rel="external">teambition</a></li>
<li><a href="https://c9.io/" target="_blank" rel="external">cloud9</a></li>
<li><a href="https://froont.com/-user/register" target="_blank" rel="external">froont网页设计</a></li>
<li><a href="https://jetstrap.com/" target="_blank" rel="external">jetstrap3网页设计</a></li>
<li><a href="https://divshot.com/" target="_blank" rel="external">divshot网页设计</a></li>
<li><a href="https://projects.invisionapp.com" target="_blank" rel="external">invisionapp设计协作</a></li>
</ul>
<h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><ul>
<li><a href="http://全搜.com/" target="_blank" rel="external">全搜</a></li>
<li><a href="http://www.886404.com/" target="_blank" rel="external">墙外搜</a></li>
</ul>
<h4 id="大牛的有料博客"><a href="#大牛的有料博客" class="headerlink" title="大牛的有料博客"></a>大牛的有料博客</h4><ul>
<li><a href="http://mindhacks.cn/" target="_blank" rel="external">刘未鹏暗时间</a></li>
<li><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="external">阮一锋</a></li>
<li><a href="http://www.matrix67.com/blog/" target="_blank" rel="external">Matrix67</a></li>
<li><a href="http://laod.cn/hosts/2015-google-hosts.html" target="_blank" rel="external">gtwHost</a></li>
</ul>
<h4 id="前端大牛blog"><a href="#前端大牛blog" class="headerlink" title="前端大牛blog"></a>前端大牛blog</h4><ul>
<li><a href="http://heroicyang.com/" target="_blank" rel="external">Heroic Yang-88-成都</a></li>
<li><a href="http://litten.github.io/" target="_blank" rel="external">黎小腾君-90-腾讯-华中</a></li>
<li><a href="http://blog.fens.me/" target="_blank" rel="external">粉丝日志</a></li>
</ul>
<h4 id="我崇拜的IT女皇和男人们"><a href="#我崇拜的IT女皇和男人们" class="headerlink" title="我崇拜的IT女皇和男人们"></a>我崇拜的IT女皇和男人们</h4><ul>
<li>马伯庸</li>
<li>章克帆</li>
<li>郭蓓菁</li>
</ul>
]]></content>
    
    <summary type="html">
    
      收集常用的网站
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="网站" scheme="http://yoursite.com/tags/%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
</feed>
